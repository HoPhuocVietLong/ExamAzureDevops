# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '82785164-0b9f-46f8-b870-ea7c18e2e99a'
  imageRepository: 'pipelineazuredeploy'
  containerRegistry: 'pipelineazuredeploy.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'pipelineazuredeploybebc-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

resources:
  - repo: self

trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main


stages:
- stage: RunTests
  displayName: Run All Tests
  jobs:
  - job: RunUnitTests
    displayName: 'Run Unit Tests:'
    strategy:
      matrix:
        frontendTest:
              gradleTask: 'checkStyleFrontend checkTestFrontend'
              gradleTaskDisplayname: 'frontend'
              preTestCommand: |
                npm --version
                node --version
                npm install
        backendTest:
              gradleTask: 'checkstyleMain checkstyleTest test'
              gradleTaskDisplayname: 'backend'
              preTestCommand: |
                java --version
                which java
      maxParallel: 2
    pool:
      vmImage: $(vmImageName)
    steps:
    - bash: ./gradlew task --build-cache $(preTestCommand)
    - task: Gradle@2
      displayName: Run $(gradleTaskDisplayname) tests
      inputs:
        gradleWrapperFile: 'gradlew'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '17'
        jdkArchitectureOption: 'x64'
        gradleOptions: '-Xmx3072m'
        tasks: $(gradleTask)
- stage: BuildProject
  displayName: Build File Jar
  dependsOn: ['RunTests']
  jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: Gradle@3
        displayName: Build and push an image to container registry
        inputs:
          gradleWrapperFile: 'gradlew'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '17'
          jdkArchitectureOption: 'x64'
          gradleOptions: '-Xmx3072m'
          tasks: bootJar

- stage: BuildDocker
  displayName: Build Docker Image
  dependsOn: ['BuildProject']
  jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          command: buildAndPush
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)
      - upload: manifests
        artifact: manifests

- stage: Deploy
  displayName: Deploy By Kubernetes
  dependsOn: ['BuildDocker']
  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'long0908113045pipelineazure.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)

    environment: 'long0908113045pipelineazure.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: default

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespaceForPR)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: Kubernetes@1
            name: get
            displayName: 'Get services in the new namespace'
            continueOnError: true
            inputs:
              command: get
              namespace: $(k8sNamespaceForPR)
              arguments: svc
              outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'

          # Getting the IP of the deployed service and writing it to a variable for posing comment
          - script: |
              url="$(get.KubectlOutput)"
              message="Your review app has been deployed"
              if [ ! -z "$url" -a "$url" != "http://:" ]
              then
                message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
              fi
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message" 
  




